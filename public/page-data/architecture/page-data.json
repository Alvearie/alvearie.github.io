{"componentChunkName":"component---src-pages-architecture-index-mdx","path":"/architecture/","result":{"pageContext":{"frontmatter":{"title":"Architecture","description":"A reference architecture for Alvearie"},"relativePagePath":"/architecture/index.mdx","titleType":"page","MdxNode":{"id":"f4384779-c211-5bca-9d19-2a1953f14485","children":[],"parent":"e4c91549-ba0a-5731-ad9f-7ac084fc0be5","internal":{"content":"---\r\ntitle: Architecture\r\ndescription: A reference architecture for Alvearie\r\n---\r\n\r\n\r\n\r\n### Conceptual Architecture\r\n\r\n![Alvearie Conceptual Architecture](../../images/alvearieConceptualArchitecture.png)\r\n\r\nProject Alvearie is a collection of components that can be combined to build custom data pipelines and other solutions \r\nthat can help organizations improve the flow of health data. These components will move the data through five key stages.\r\n\r\nThese stages include data integration, data ingestion, data persistence, data access and data analytics. There will also be \r\ntwo layers that are used across all of the stages: cloud infrastructure and common services.\r\n\r\nLet's explore the specific technologies that will be used in each stage.\r\n\r\n**Cloud Infrastructure**\r\n\r\nOur ultimate goal is for Alvearie to be cloud agnostic. To achieve that, we'll be building all the components of Alvearie on an OpenShift infrastructure. OpenShift provides the flexibility needed for Alvearie to work on any cloud platform, so developers and healthcare organizations can work with services they trust and know deeply.\r\n\r\n**Common Services**\r\n\r\nThis layer will include important features that most organizations need for managing health data. These services will include auditing, \r\nlogging, security management, data quality and lineage and other services shared across each stage of Alvearie. \r\n\r\n\r\n### Data Integration and Ingestion Architecture \r\n\r\n![Alvearie Architecture](../../images/alvearieArchitecturePart1.png)\r\n\r\n\r\n### Data integration\r\n\r\nThe data integration stage will be the starting point for any data coming into Alvearie that isn't already in a standard \r\nformat like FHIR or DICOM. This stage will provide a single front door for incoming data and will transform raw data into standard \r\nformats that can be used by Alvearie. Key components include:\r\n\r\n  - **Linux for Health Connect:** [Linux for Health](https://linuxforhealth.github.io/docs/) is an operating system that can be run where the data is stored, either on-premises or in the cloud, and used to export the data into Alvearie.\r\n\r\n  - **Intelligent Data as a Service:** This [open source framework](https://connectedhealth-idaas.io/) for integrating health data from Red Hat will complement Alvearie by making it easier for health care systems to integrate with the Alvearie environment.\r\n\r\n  - **Client gateway**: The client gateway will provide a path for data to be standardized and combined in a batch before sending to Alvearie. This component will be based on an open source integration engine called [Mirth](https://github.com/nextgenhealthcare/connect).\r\n\r\n###  Data ingestion\r\n\r\nThe next stage that data will travel through is the data ingestion stage. Here, the records will be ingested by \r\nAlvearie and pass through several orchestration steps that provide some additional data transformation and standardization \r\nbefore the data is stored in a database. For this stage, we'll be using [Apache NiFi](https://nifi.apache.org/), an open source technology that can efficiently \r\nprocess and distribute large quantities of data. The components for this stage include:\r\n\r\n  - [Health record ingestion](https://alvearie.github.io/HRI/): All incoming data in FHIR and HL7 v2 formats will be sent to HRI where it will be audited, logged, and routed to Nifi for orchestration.\r\n\r\n  - [Imaging ingestion](https://github.com/Alvearie/imaging-ingestion): Imaging data in the form of DICOM will be received by this component.  The images will be persisted in a configured DICOM storage component, and metadata about the images will be passed into Nifi for orchestration.\r\n\r\n  - [FHIR ingestion](https://github.com/Alvearie/hri-pipeline-adapters): Some additional transformation of FHIR records will be conducted so that all FHIR records conform to Alvearie's common data model. When the records are in this common format, they can either be stored in a database or transformed further with additional data orchestration components like de-identification or patient and provider matching.\r\n\r\n  - **Alvearie FHIR Implementation Guide:** This FHIR Implementation Guide extends the FHIR v4 guide and provides additional profiles to enable analytics, person matching and other features.\r\n\r\n  - **Patient and provider matching:** This component will identify unique patient and provider records so that duplicate records can be merged or linked.\r\n\r\n  - [Data De-identification](https://github.com/Alvearie/de-identification): Data that is de-identified is very valuable for conducting research or tracking performance with analytics. With this component, records can be de-identified then stored in a database for other tools to access it.\r\n\r\n\r\n### Data Persistence, Access and Analytics Architecture\r\n\r\n![Alvearie Architecture](../../images/alvearieArchitecturePart2.png)\r\n\r\n### Data persistence\r\n\r\nOnce the data is fully integrated and transformed into FHIR format, it will need to be stored. Because different organizations \r\nhave different requirements and goals, this stage will be configurable and provide a few different options for storing data. \r\nHere are some of the options that will be included:\r\n\r\n  - [IBM FHIR server](https://ibm.github.io/FHIR/):  This open source server provides a data store for FHIR resources in either IBM DB2 or Postgres and HTTP APIs for storage and retrieval.\r\n\r\n  - [Dcm4che DICOM storage](https://www.dcm4che.org/): Imaging data will be stored in a database using an open source clinical image archive called Dcm4che.\r\n\r\n  - **Relational data warehouse**: Organizations will have the option to use a relational data warehouse if they want a more traditional way to store their data and connect it to business applications.\r\n\r\n  - **Parquet data store**: The Parquet storage format can be used by organizations that need that structure for running analytics applications.\r\n\r\n### Data access\r\n\r\nAlvearie will be able to serve the data to APIs and other applications during this stage. This stage will ultimately be when most \r\nexternal applications connect with Alvearie to retrieve the standardized data. The connections we're planning to build include:\r\n\r\n  - [3scale](https://www.3scale.net/): APIs can connect through this component to deliver data to external applications. 3scale is an open source API gateway supported by Red Hat.\r\n\r\n  - **SMART on FHIR and CDS Hooks**: [SMART on FHIR](https://smarthealthit.org/) is a free, open standards API that provides access to FHIR data and [CDS Hooks](https://cds-hooks.org/) is an open API for clinical decision support. These APIs can be used for data requests from a variety of applications, ranging from smartphone apps to enterprise analytics.\r\n\r\n### Data analytics\r\n\r\nOften, additional steps need to be taken to prepare data for analytics and research. This stage in Alvearie will offer services and components that can make the standardized data usable for artificial intelligence (AI) applications, creating patient cohorts and other healthcare-specific use cases. The analytics components include:\r\n\r\n  - [Cohort & Quality Measure service](https://alvearie.github.io/quality-measure-and-cohort-service/): This service will provide the ability for patient cohorts to be defined and retrieved using Clinical Quality Language. This service will be valuable for researchers and healthcare leaders who want to learn more about specific patient populations.\r\n\r\n  - [Kubeflow](https://www.kubeflow.org/): This open source project provides a portable way to deploy machine learning workflows on kubernetes. \r\n\r\n  - **Dashboards**: Analytics dashboards from various vendors can be connected to data storage through this component to provide organizations with their most recent data. \r\n\r\n<p/>\r\n<p/>\r\n\r\n  \r\n","type":"Mdx","contentDigest":"33c0477f3b58136877e84b45f9150c77","counter":114,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Architecture","description":"A reference architecture for Alvearie"},"exports":{},"rawBody":"---\r\ntitle: Architecture\r\ndescription: A reference architecture for Alvearie\r\n---\r\n\r\n\r\n\r\n### Conceptual Architecture\r\n\r\n![Alvearie Conceptual Architecture](../../images/alvearieConceptualArchitecture.png)\r\n\r\nProject Alvearie is a collection of components that can be combined to build custom data pipelines and other solutions \r\nthat can help organizations improve the flow of health data. These components will move the data through five key stages.\r\n\r\nThese stages include data integration, data ingestion, data persistence, data access and data analytics. There will also be \r\ntwo layers that are used across all of the stages: cloud infrastructure and common services.\r\n\r\nLet's explore the specific technologies that will be used in each stage.\r\n\r\n**Cloud Infrastructure**\r\n\r\nOur ultimate goal is for Alvearie to be cloud agnostic. To achieve that, we'll be building all the components of Alvearie on an OpenShift infrastructure. OpenShift provides the flexibility needed for Alvearie to work on any cloud platform, so developers and healthcare organizations can work with services they trust and know deeply.\r\n\r\n**Common Services**\r\n\r\nThis layer will include important features that most organizations need for managing health data. These services will include auditing, \r\nlogging, security management, data quality and lineage and other services shared across each stage of Alvearie. \r\n\r\n\r\n### Data Integration and Ingestion Architecture \r\n\r\n![Alvearie Architecture](../../images/alvearieArchitecturePart1.png)\r\n\r\n\r\n### Data integration\r\n\r\nThe data integration stage will be the starting point for any data coming into Alvearie that isn't already in a standard \r\nformat like FHIR or DICOM. This stage will provide a single front door for incoming data and will transform raw data into standard \r\nformats that can be used by Alvearie. Key components include:\r\n\r\n  - **Linux for Health Connect:** [Linux for Health](https://linuxforhealth.github.io/docs/) is an operating system that can be run where the data is stored, either on-premises or in the cloud, and used to export the data into Alvearie.\r\n\r\n  - **Intelligent Data as a Service:** This [open source framework](https://connectedhealth-idaas.io/) for integrating health data from Red Hat will complement Alvearie by making it easier for health care systems to integrate with the Alvearie environment.\r\n\r\n  - **Client gateway**: The client gateway will provide a path for data to be standardized and combined in a batch before sending to Alvearie. This component will be based on an open source integration engine called [Mirth](https://github.com/nextgenhealthcare/connect).\r\n\r\n###  Data ingestion\r\n\r\nThe next stage that data will travel through is the data ingestion stage. Here, the records will be ingested by \r\nAlvearie and pass through several orchestration steps that provide some additional data transformation and standardization \r\nbefore the data is stored in a database. For this stage, we'll be using [Apache NiFi](https://nifi.apache.org/), an open source technology that can efficiently \r\nprocess and distribute large quantities of data. The components for this stage include:\r\n\r\n  - [Health record ingestion](https://alvearie.github.io/HRI/): All incoming data in FHIR and HL7 v2 formats will be sent to HRI where it will be audited, logged, and routed to Nifi for orchestration.\r\n\r\n  - [Imaging ingestion](https://github.com/Alvearie/imaging-ingestion): Imaging data in the form of DICOM will be received by this component.  The images will be persisted in a configured DICOM storage component, and metadata about the images will be passed into Nifi for orchestration.\r\n\r\n  - [FHIR ingestion](https://github.com/Alvearie/hri-pipeline-adapters): Some additional transformation of FHIR records will be conducted so that all FHIR records conform to Alvearie's common data model. When the records are in this common format, they can either be stored in a database or transformed further with additional data orchestration components like de-identification or patient and provider matching.\r\n\r\n  - **Alvearie FHIR Implementation Guide:** This FHIR Implementation Guide extends the FHIR v4 guide and provides additional profiles to enable analytics, person matching and other features.\r\n\r\n  - **Patient and provider matching:** This component will identify unique patient and provider records so that duplicate records can be merged or linked.\r\n\r\n  - [Data De-identification](https://github.com/Alvearie/de-identification): Data that is de-identified is very valuable for conducting research or tracking performance with analytics. With this component, records can be de-identified then stored in a database for other tools to access it.\r\n\r\n\r\n### Data Persistence, Access and Analytics Architecture\r\n\r\n![Alvearie Architecture](../../images/alvearieArchitecturePart2.png)\r\n\r\n### Data persistence\r\n\r\nOnce the data is fully integrated and transformed into FHIR format, it will need to be stored. Because different organizations \r\nhave different requirements and goals, this stage will be configurable and provide a few different options for storing data. \r\nHere are some of the options that will be included:\r\n\r\n  - [IBM FHIR server](https://ibm.github.io/FHIR/):  This open source server provides a data store for FHIR resources in either IBM DB2 or Postgres and HTTP APIs for storage and retrieval.\r\n\r\n  - [Dcm4che DICOM storage](https://www.dcm4che.org/): Imaging data will be stored in a database using an open source clinical image archive called Dcm4che.\r\n\r\n  - **Relational data warehouse**: Organizations will have the option to use a relational data warehouse if they want a more traditional way to store their data and connect it to business applications.\r\n\r\n  - **Parquet data store**: The Parquet storage format can be used by organizations that need that structure for running analytics applications.\r\n\r\n### Data access\r\n\r\nAlvearie will be able to serve the data to APIs and other applications during this stage. This stage will ultimately be when most \r\nexternal applications connect with Alvearie to retrieve the standardized data. The connections we're planning to build include:\r\n\r\n  - [3scale](https://www.3scale.net/): APIs can connect through this component to deliver data to external applications. 3scale is an open source API gateway supported by Red Hat.\r\n\r\n  - **SMART on FHIR and CDS Hooks**: [SMART on FHIR](https://smarthealthit.org/) is a free, open standards API that provides access to FHIR data and [CDS Hooks](https://cds-hooks.org/) is an open API for clinical decision support. These APIs can be used for data requests from a variety of applications, ranging from smartphone apps to enterprise analytics.\r\n\r\n### Data analytics\r\n\r\nOften, additional steps need to be taken to prepare data for analytics and research. This stage in Alvearie will offer services and components that can make the standardized data usable for artificial intelligence (AI) applications, creating patient cohorts and other healthcare-specific use cases. The analytics components include:\r\n\r\n  - [Cohort & Quality Measure service](https://alvearie.github.io/quality-measure-and-cohort-service/): This service will provide the ability for patient cohorts to be defined and retrieved using Clinical Quality Language. This service will be valuable for researchers and healthcare leaders who want to learn more about specific patient populations.\r\n\r\n  - [Kubeflow](https://www.kubeflow.org/): This open source project provides a portable way to deploy machine learning workflows on kubernetes. \r\n\r\n  - **Dashboards**: Analytics dashboards from various vendors can be connected to data storage through this component to provide organizations with their most recent data. \r\n\r\n<p/>\r\n<p/>\r\n\r\n  \r\n","fileAbsolutePath":"C:/Users/TomEggebraaten/git/alvearie.github.io/src/pages/architecture/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3037994772","3037994772","768070550","768070550"]}